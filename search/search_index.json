{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Structures \u00b6 Structures is a collection of data structures implemented in Luau. Goals \u00b6 As performant as possible. Simple and straightforward. Full test coverage. Completely typed. Installation \u00b6 Standard workflow: Get Structures from the Roblox library. Place Structures in the ReplicatedStorage service. Rojo workflow: Download Structures from the latest release on GitHub. Extract the zipped file. Place Structures into your project directory. Use Rojo to point Structures to ReplicatedStorage. Documentation \u00b6 Structures DoublyLinkedList LinkedList Map Queue Set Stack Classes DoublyLinkedListNode LinkedListNode License \u00b6 MIT License","title":"What is Structures?"},{"location":"#structures","text":"Structures is a collection of data structures implemented in Luau.","title":"Structures"},{"location":"#goals","text":"As performant as possible. Simple and straightforward. Full test coverage. Completely typed.","title":"Goals"},{"location":"#installation","text":"Standard workflow: Get Structures from the Roblox library. Place Structures in the ReplicatedStorage service. Rojo workflow: Download Structures from the latest release on GitHub. Extract the zipped file. Place Structures into your project directory. Use Rojo to point Structures to ReplicatedStorage.","title":"Installation"},{"location":"#documentation","text":"Structures DoublyLinkedList LinkedList Map Queue Set Stack Classes DoublyLinkedListNode LinkedListNode","title":"Documentation"},{"location":"#license","text":"MIT License","title":"License"},{"location":"doublylinkedlist/","text":"DoublyLinkedList \u00b6 A DoublyLinkedList is a linear collection of nodes that point to the next and previous node in the collection. Constructor \u00b6 DoublyLinkedList DoublyLinkedList() \u00b6 Constructs a new DoublyLinkedList object. 1 local myDoublyLinkedList = DoublyLinkedList () Properties \u00b6 any head \u00b6 Returns the DoublyLinkedListNode at the head of the DoublyLinkedList object. number size \u00b6 Returns the number of elements in the DoublyLinkedList object. any tail \u00b6 Returns the DoublyLinkedListNode at the tail of the DoublyLinkedList object. Methods \u00b6 void append( any value ) \u00b6 Appends value to the end of the DoublyLinkedList object. boolean has( any value ) \u00b6 Returns a boolean asserting whether the DoublyLinkedList object has value or not. boolean isEmpty() \u00b6 Returns a boolean asserting whether the DoublyLinkedList object is empty or not. void prepend( any value ) \u00b6 Prepends value to the beginning of the DoublyLinkedList object. boolean remove( any value ) \u00b6 Removes all occurences of value in the DoublyLinkedList object. Returns true if it removed any values, otherwise it returns false. any removeHead() \u00b6 Removes the head from the DoublyLinkedList and returns it if it has one, otherwise it returns nil. any removeTail() \u00b6 Removes the tail from the DoublyLinkedList and returns it if it has one, otherwise it returns nil. Note This operation has a time complexity of O(1) where as the LinkedList implementation has a time complexity of O(n). Iteration methods \u00b6 values() \u00b6 Returns an iterator that contains the value for each DoublyLinkedListNode in the DoublyLinkedList object, in insertion order. Examples \u00b6 Using the DoublyLinkedList object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 local myDoublyLinkedList = DoublyLinkedList () myDoublyLinkedList : isEmpty () -- true myDoublyLinkedList : append ( \"a\" ) -- DoublyLinkedList {\"a\"} myDoublyLinkedList : append ( \"b\" ) -- DoublyLinkedList {\"a\", \"b\"} myDoublyLinkedList : prepend ( \"c\" ) -- DoublyLinkedList {\"c\", \"a\", \"b\"} myDoublyLinkedList . size -- 3 myDoublyLinkedList : isEmpty () -- false myDoublyLinkedList : has ( \"a\" ) -- true myDoublyLinkedList : append ( \"a\" ) -- DoublyLinkedList {\"c\", \"a\", \"b\", \"a\"} myDoublyLinkedList : remove ( \"a\" ) -- true, DoublyLinkedList {\"c\", \"b\"} myDoublyLinkedList : remove ( \"d\" ) -- false, DoublyLinkedList {\"c\", \"b\"} myDoublyLinkedList : has ( \"a\" ) -- false myDoublyLinkedList : append ( \"a\" ) -- DoublyLinkedList {\"c\", \"b\", \"a\"} myDoublyLinkedList : removeTail () -- \"a\", DoublyLinkedList {\"c\", \"b\"} myDoublyLinkedList : removeHead () -- \"c\", DoublyLinkedList {\"b\"} myDoublyLinkedList : removeHead () -- \"b\", DoublyLinkedList {} myDoublyLinkedList . size -- 0 Iterating the DoublyLinkedList object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 local myDoublyLinkedList = DoublyLinkedList () myDoublyLinkedList : append ( \"a\" ) myDoublyLinkedList : append ( \"b\" ) myDoublyLinkedList : append ( \"c\" ) for value in myDoublyLinkedList : values () do print ( value ) end -- a -- b -- c Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(n) O(n) O(1) O(n) Space Complexity \u00b6 O(n)","title":"DoublyLinkedList"},{"location":"doublylinkedlist/#doublylinkedlist","text":"A DoublyLinkedList is a linear collection of nodes that point to the next and previous node in the collection.","title":"DoublyLinkedList"},{"location":"doublylinkedlist/#constructor","text":"","title":"Constructor"},{"location":"doublylinkedlist/#doublylinkedlist-doublylinkedlist","text":"Constructs a new DoublyLinkedList object. 1 local myDoublyLinkedList = DoublyLinkedList ()","title":"DoublyLinkedList DoublyLinkedList()"},{"location":"doublylinkedlist/#properties","text":"","title":"Properties"},{"location":"doublylinkedlist/#any-head","text":"Returns the DoublyLinkedListNode at the head of the DoublyLinkedList object.","title":"any head"},{"location":"doublylinkedlist/#number-size","text":"Returns the number of elements in the DoublyLinkedList object.","title":"number size"},{"location":"doublylinkedlist/#any-tail","text":"Returns the DoublyLinkedListNode at the tail of the DoublyLinkedList object.","title":"any tail"},{"location":"doublylinkedlist/#methods","text":"","title":"Methods"},{"location":"doublylinkedlist/#void-appendany-value","text":"Appends value to the end of the DoublyLinkedList object.","title":"void append(any value)"},{"location":"doublylinkedlist/#boolean-hasany-value","text":"Returns a boolean asserting whether the DoublyLinkedList object has value or not.","title":"boolean has(any value)"},{"location":"doublylinkedlist/#boolean-isempty","text":"Returns a boolean asserting whether the DoublyLinkedList object is empty or not.","title":"boolean isEmpty()"},{"location":"doublylinkedlist/#void-prependany-value","text":"Prepends value to the beginning of the DoublyLinkedList object.","title":"void prepend(any value)"},{"location":"doublylinkedlist/#boolean-removeany-value","text":"Removes all occurences of value in the DoublyLinkedList object. Returns true if it removed any values, otherwise it returns false.","title":"boolean remove(any value)"},{"location":"doublylinkedlist/#any-removehead","text":"Removes the head from the DoublyLinkedList and returns it if it has one, otherwise it returns nil.","title":"any removeHead()"},{"location":"doublylinkedlist/#any-removetail","text":"Removes the tail from the DoublyLinkedList and returns it if it has one, otherwise it returns nil. Note This operation has a time complexity of O(1) where as the LinkedList implementation has a time complexity of O(n).","title":"any removeTail()"},{"location":"doublylinkedlist/#iteration-methods","text":"","title":"Iteration methods"},{"location":"doublylinkedlist/#values","text":"Returns an iterator that contains the value for each DoublyLinkedListNode in the DoublyLinkedList object, in insertion order.","title":"values()"},{"location":"doublylinkedlist/#examples","text":"","title":"Examples"},{"location":"doublylinkedlist/#using-the-doublylinkedlist-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 local myDoublyLinkedList = DoublyLinkedList () myDoublyLinkedList : isEmpty () -- true myDoublyLinkedList : append ( \"a\" ) -- DoublyLinkedList {\"a\"} myDoublyLinkedList : append ( \"b\" ) -- DoublyLinkedList {\"a\", \"b\"} myDoublyLinkedList : prepend ( \"c\" ) -- DoublyLinkedList {\"c\", \"a\", \"b\"} myDoublyLinkedList . size -- 3 myDoublyLinkedList : isEmpty () -- false myDoublyLinkedList : has ( \"a\" ) -- true myDoublyLinkedList : append ( \"a\" ) -- DoublyLinkedList {\"c\", \"a\", \"b\", \"a\"} myDoublyLinkedList : remove ( \"a\" ) -- true, DoublyLinkedList {\"c\", \"b\"} myDoublyLinkedList : remove ( \"d\" ) -- false, DoublyLinkedList {\"c\", \"b\"} myDoublyLinkedList : has ( \"a\" ) -- false myDoublyLinkedList : append ( \"a\" ) -- DoublyLinkedList {\"c\", \"b\", \"a\"} myDoublyLinkedList : removeTail () -- \"a\", DoublyLinkedList {\"c\", \"b\"} myDoublyLinkedList : removeHead () -- \"c\", DoublyLinkedList {\"b\"} myDoublyLinkedList : removeHead () -- \"b\", DoublyLinkedList {} myDoublyLinkedList . size -- 0","title":"Using the DoublyLinkedList object"},{"location":"doublylinkedlist/#iterating-the-doublylinkedlist-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 local myDoublyLinkedList = DoublyLinkedList () myDoublyLinkedList : append ( \"a\" ) myDoublyLinkedList : append ( \"b\" ) myDoublyLinkedList : append ( \"c\" ) for value in myDoublyLinkedList : values () do print ( value ) end -- a -- b -- c","title":"Iterating the DoublyLinkedList object"},{"location":"doublylinkedlist/#complexities","text":"","title":"Complexities"},{"location":"doublylinkedlist/#time-complexity","text":"Access Search Insertion Deletion O(n) O(n) O(1) O(n)","title":"Time Complexity"},{"location":"doublylinkedlist/#space-complexity","text":"O(n)","title":"Space Complexity"},{"location":"doublylinkedlistnode/","text":"DoublyLinkedListNode \u00b6 Constructor \u00b6 DoublyLinkedListNode DoublyLinkedListNode( any value , DoublyLinkedListNode ? next , DoublyLinkedListNode ? previous ) \u00b6 Constructs a new DoublyLinkedListNode object. 1 local myDoublyLinkedListNode = DoublyLinkedListNode . new ( \"value\" ) Properties \u00b6 DoublyLinkedListNode ? next \u00b6 Returns the DoublyLinkedListNode that comes after the DoublyLinkedListNode object if it exists, othwerise it returns nil . DoublyLinkedListNode ? previous \u00b6 Returns the DoublyLinkedListNode that comes before the DoublyLinkedListNode object if it exists, othwerise it returns nil . any value \u00b6 Returns the value of the DoublyLinkedListNode object.","title":"DoublyLinkedListNode"},{"location":"doublylinkedlistnode/#doublylinkedlistnode","text":"","title":"DoublyLinkedListNode"},{"location":"doublylinkedlistnode/#constructor","text":"","title":"Constructor"},{"location":"doublylinkedlistnode/#doublylinkedlistnode-doublylinkedlistnodeany-value-doublylinkedlistnode-next-doublylinkedlistnode-previous","text":"Constructs a new DoublyLinkedListNode object. 1 local myDoublyLinkedListNode = DoublyLinkedListNode . new ( \"value\" )","title":"DoublyLinkedListNode DoublyLinkedListNode(any value, DoublyLinkedListNode? next, DoublyLinkedListNode? previous)"},{"location":"doublylinkedlistnode/#properties","text":"","title":"Properties"},{"location":"doublylinkedlistnode/#doublylinkedlistnode-next","text":"Returns the DoublyLinkedListNode that comes after the DoublyLinkedListNode object if it exists, othwerise it returns nil .","title":"DoublyLinkedListNode? next"},{"location":"doublylinkedlistnode/#doublylinkedlistnode-previous","text":"Returns the DoublyLinkedListNode that comes before the DoublyLinkedListNode object if it exists, othwerise it returns nil .","title":"DoublyLinkedListNode? previous"},{"location":"doublylinkedlistnode/#any-value","text":"Returns the value of the DoublyLinkedListNode object.","title":"any value"},{"location":"linkedlist/","text":"LinkedList \u00b6 A LinkedList is a linear collection of nodes that point to the next node in the collection. Constructor \u00b6 LinkedList LinkedList() \u00b6 Constructs a new LinkedList object. 1 local myLinkedList = LinkedList () Properties \u00b6 any head \u00b6 Returns the LinkedListNode at the head of the LinkedList object. number size \u00b6 Returns the number of elements in the LinkedList object. any tail \u00b6 Returns the LinkedListNode at the tail of the LinkedList object. Methods \u00b6 void append( any value ) \u00b6 Appends value to the end of the LinkedList object. boolean has( any value ) \u00b6 Returns a boolean asserting whether the LinkedList object has value or not. boolean isEmpty() \u00b6 Returns a boolean asserting whether the LinkedList object is empty or not. void prepend( any value ) \u00b6 Prepends value to the beginning of the LinkedList object. boolean remove( any value ) \u00b6 Removes all occurences of value in the LinkedList object. Returns true if it removed any values, otherwise it returns false. any removeHead() \u00b6 Removes the head from the LinkedList and returns it if it has one, otherwise it returns nil. any removeTail() \u00b6 Removes the tail from the LinkedList and returns it if it has one, otherwise it returns nil. Iteration methods \u00b6 values() \u00b6 Returns an iterator that contains the value for each LinkedListNode in the LinkedList object, in insertion order. Examples \u00b6 Using the LinkedList object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 local myLinkedList = LinkedList () myLinkedList : isEmpty () -- true myLinkedList : append ( \"a\" ) -- LinkedList {\"a\"} myLinkedList : append ( \"b\" ) -- LinkedList {\"a\", \"b\"} myLinkedList : prepend ( \"c\" ) -- LinkedList {\"c\", \"a\", \"b\"} myLinkedList . size -- 3 myLinkedList : isEmpty () -- false myLinkedList : has ( \"a\" ) -- true myLinkedList : append ( \"a\" ) -- LinkedList {\"c\", \"a\", \"b\", \"a\"} myLinkedList : remove ( \"a\" ) -- true, LinkedList {\"c\", \"b\"} myLinkedList : remove ( \"d\" ) -- false, LinkedList {\"c\", \"b\"} myLinkedList : has ( \"a\" ) -- false myLinkedList : append ( \"a\" ) -- LinkedList {\"c\", \"b\", \"a\"} myLinkedList : removeTail () -- \"a\", LinkedList {\"c\", \"b\"} myLinkedList : removeHead () -- \"c\", LinkedList {\"b\"} myLinkedList : removeHead () -- \"b\", LinkedList {} myLinkedList . size -- 0 Iterating the LinkedList object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 local myLinkedList = LinkedList () myLinkedList : append ( \"a\" ) myLinkedList : append ( \"b\" ) myLinkedList : append ( \"c\" ) for value in myLinkedList : values () do print ( value ) end -- a -- b -- c Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(n) O(n) O(1) O(n) Space Complexity \u00b6 O(n)","title":"LinkedList"},{"location":"linkedlist/#linkedlist","text":"A LinkedList is a linear collection of nodes that point to the next node in the collection.","title":"LinkedList"},{"location":"linkedlist/#constructor","text":"","title":"Constructor"},{"location":"linkedlist/#linkedlist-linkedlist","text":"Constructs a new LinkedList object. 1 local myLinkedList = LinkedList ()","title":"LinkedList LinkedList()"},{"location":"linkedlist/#properties","text":"","title":"Properties"},{"location":"linkedlist/#any-head","text":"Returns the LinkedListNode at the head of the LinkedList object.","title":"any head"},{"location":"linkedlist/#number-size","text":"Returns the number of elements in the LinkedList object.","title":"number size"},{"location":"linkedlist/#any-tail","text":"Returns the LinkedListNode at the tail of the LinkedList object.","title":"any tail"},{"location":"linkedlist/#methods","text":"","title":"Methods"},{"location":"linkedlist/#void-appendany-value","text":"Appends value to the end of the LinkedList object.","title":"void append(any value)"},{"location":"linkedlist/#boolean-hasany-value","text":"Returns a boolean asserting whether the LinkedList object has value or not.","title":"boolean has(any value)"},{"location":"linkedlist/#boolean-isempty","text":"Returns a boolean asserting whether the LinkedList object is empty or not.","title":"boolean isEmpty()"},{"location":"linkedlist/#void-prependany-value","text":"Prepends value to the beginning of the LinkedList object.","title":"void prepend(any value)"},{"location":"linkedlist/#boolean-removeany-value","text":"Removes all occurences of value in the LinkedList object. Returns true if it removed any values, otherwise it returns false.","title":"boolean remove(any value)"},{"location":"linkedlist/#any-removehead","text":"Removes the head from the LinkedList and returns it if it has one, otherwise it returns nil.","title":"any removeHead()"},{"location":"linkedlist/#any-removetail","text":"Removes the tail from the LinkedList and returns it if it has one, otherwise it returns nil.","title":"any removeTail()"},{"location":"linkedlist/#iteration-methods","text":"","title":"Iteration methods"},{"location":"linkedlist/#values","text":"Returns an iterator that contains the value for each LinkedListNode in the LinkedList object, in insertion order.","title":"values()"},{"location":"linkedlist/#examples","text":"","title":"Examples"},{"location":"linkedlist/#using-the-linkedlist-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 local myLinkedList = LinkedList () myLinkedList : isEmpty () -- true myLinkedList : append ( \"a\" ) -- LinkedList {\"a\"} myLinkedList : append ( \"b\" ) -- LinkedList {\"a\", \"b\"} myLinkedList : prepend ( \"c\" ) -- LinkedList {\"c\", \"a\", \"b\"} myLinkedList . size -- 3 myLinkedList : isEmpty () -- false myLinkedList : has ( \"a\" ) -- true myLinkedList : append ( \"a\" ) -- LinkedList {\"c\", \"a\", \"b\", \"a\"} myLinkedList : remove ( \"a\" ) -- true, LinkedList {\"c\", \"b\"} myLinkedList : remove ( \"d\" ) -- false, LinkedList {\"c\", \"b\"} myLinkedList : has ( \"a\" ) -- false myLinkedList : append ( \"a\" ) -- LinkedList {\"c\", \"b\", \"a\"} myLinkedList : removeTail () -- \"a\", LinkedList {\"c\", \"b\"} myLinkedList : removeHead () -- \"c\", LinkedList {\"b\"} myLinkedList : removeHead () -- \"b\", LinkedList {} myLinkedList . size -- 0","title":"Using the LinkedList object"},{"location":"linkedlist/#iterating-the-linkedlist-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 local myLinkedList = LinkedList () myLinkedList : append ( \"a\" ) myLinkedList : append ( \"b\" ) myLinkedList : append ( \"c\" ) for value in myLinkedList : values () do print ( value ) end -- a -- b -- c","title":"Iterating the LinkedList object"},{"location":"linkedlist/#complexities","text":"","title":"Complexities"},{"location":"linkedlist/#time-complexity","text":"Access Search Insertion Deletion O(n) O(n) O(1) O(n)","title":"Time Complexity"},{"location":"linkedlist/#space-complexity","text":"O(n)","title":"Space Complexity"},{"location":"linkedlistnode/","text":"LinkedListNode \u00b6 Constructor \u00b6 LinkedListNode LinkedListNode( any value , LinkedListNode ? next ) \u00b6 Constructs a new LinkedListNode object. 1 local myLinkedListNode = LinkedListNode . new ( \"value\" ) Properties \u00b6 LinkedListNode ? next \u00b6 Returns the LinkedListNode that comes after the LinkedListNode object if it exists, othwerise it returns nil . any value \u00b6 Returns the value of the LinkedListNode object.","title":"LinkedListNode"},{"location":"linkedlistnode/#linkedlistnode","text":"","title":"LinkedListNode"},{"location":"linkedlistnode/#constructor","text":"","title":"Constructor"},{"location":"linkedlistnode/#linkedlistnode-linkedlistnodeany-value-linkedlistnode-next","text":"Constructs a new LinkedListNode object. 1 local myLinkedListNode = LinkedListNode . new ( \"value\" )","title":"LinkedListNode LinkedListNode(any value, LinkedListNode?  next)"},{"location":"linkedlistnode/#properties","text":"","title":"Properties"},{"location":"linkedlistnode/#linkedlistnode-next","text":"Returns the LinkedListNode that comes after the LinkedListNode object if it exists, othwerise it returns nil .","title":"LinkedListNode? next"},{"location":"linkedlistnode/#any-value","text":"Returns the value of the LinkedListNode object.","title":"any value"},{"location":"list/","text":"List \u00b6 A List is a collection of values in a numerical order, where the same value may occur more than once. Constructor \u00b6 List List( Array < any > ? values ) \u00b6 Constructs a new List object with the optional default values. 1 local myList = List ({ \"a\" , \"b\" , \"c\" }) Properties \u00b6 number size \u00b6 Returns the number of values in the List object. Methods \u00b6 void clear() \u00b6 Removes all values from the List object. any get( number index ) \u00b6 Returns the value at the given index , or nil if there is none. number ? indexOf( any value , number ? start ) \u00b6 Returns the first index at which the value can be found, or nil if it is not present. The search will start at the given start index if it exists, otherwise it will start at index 1. any pop() \u00b6 Removes the values at the end of the List object and returns it if it exists, otherwise it returns nil . void push( any element ) \u00b6 Inserts value at the end of the List object. boolean remove( any value ) \u00b6 Removes the first occurrence of value , returns true if it removed a value, otherwise false. void set( number index , any value ) \u00b6 Sets the value at index to the new value . void splice( number start , number ? deleteCount , ... any ? items ) \u00b6 Changes the values of an array by removing or replacing existing values and/or adding new values in their place. The change starts at the start index and continues for deleteCount . If deleteCount is not specified, it default to 1. You can provide a list of items that will replace the values starting at the start index. Iteration methods \u00b6 entries() \u00b6 Returns an iterator that contains a table of [ index , value ] for each index in the List object, in order. values() \u00b6 Returns an iterator that contains the value for each index in the List object, in order. Examples \u00b6 Using the List object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 local myList = List () myList : push ( \"a\" ) -- List {\"a\"} myList : push ( \"b\" ) -- List {\"a\", \"b\"} myList : push ( \"c\" ) -- List {\"a\", \"b\", \"c\"} myList . size -- 3 myList : get ( 2 ) -- \"b\" myList : indexOf ( \"a\" ) -- 1 myList : remove ( \"a\" ) -- true, List {\"b\", \"c\"} myList : remove ( \"d\" ) -- false, List {\"b\", \"c\"} myList : pop () -- \"c\", List {\"b\"} myList : set ( 1 , \"a\" ) myList : get ( 1 ) -- \"a\" myList : push ( \"a\" ) -- List {\"a\"} myList : push ( \"b\" ) -- List {\"a\", \"b\"} myList : push ( \"c\" ) -- List {\"a\", \"b\", \"c\"} myList : splice ( 2 , 1 , \"x\" ) -- List {\"a\", \"x\", \"c\"} myList : splice ( 2 , 1 ) -- List {\"a\", \"c\"} myList : clear () myList . size -- 0 Iterating the List object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 local myList = List () myList : push ( \"a\" ) myList : push ( \"b\" ) myList : push ( \"c\" ) for index , value in myList : entries () do print ( index , value ) end -- 1, a -- 2, b -- 3, c for value in myList : values () do print ( value ) end -- a -- b -- c Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(1) O(n) O(n) O(n) Space Complexity \u00b6 O(n)","title":"List"},{"location":"list/#list","text":"A List is a collection of values in a numerical order, where the same value may occur more than once.","title":"List"},{"location":"list/#constructor","text":"","title":"Constructor"},{"location":"list/#list-listarrayany-values","text":"Constructs a new List object with the optional default values. 1 local myList = List ({ \"a\" , \"b\" , \"c\" })","title":"List List(Array&lt;any>? values)"},{"location":"list/#properties","text":"","title":"Properties"},{"location":"list/#number-size","text":"Returns the number of values in the List object.","title":"number size"},{"location":"list/#methods","text":"","title":"Methods"},{"location":"list/#void-clear","text":"Removes all values from the List object.","title":"void clear()"},{"location":"list/#any-getnumber-index","text":"Returns the value at the given index , or nil if there is none.","title":"any get(number index)"},{"location":"list/#number-indexofany-value-number-start","text":"Returns the first index at which the value can be found, or nil if it is not present. The search will start at the given start index if it exists, otherwise it will start at index 1.","title":"number? indexOf(any value, number? start)"},{"location":"list/#any-pop","text":"Removes the values at the end of the List object and returns it if it exists, otherwise it returns nil .","title":"any pop()"},{"location":"list/#void-pushany-element","text":"Inserts value at the end of the List object.","title":"void push(any element)"},{"location":"list/#boolean-removeany-value","text":"Removes the first occurrence of value , returns true if it removed a value, otherwise false.","title":"boolean remove(any value)"},{"location":"list/#void-setnumber-index-any-value","text":"Sets the value at index to the new value .","title":"void set(number index, any value)"},{"location":"list/#void-splicenumber-start-number-deletecount-any-items","text":"Changes the values of an array by removing or replacing existing values and/or adding new values in their place. The change starts at the start index and continues for deleteCount . If deleteCount is not specified, it default to 1. You can provide a list of items that will replace the values starting at the start index.","title":"void splice(number start, number? deleteCount, ...any? items)"},{"location":"list/#iteration-methods","text":"","title":"Iteration methods"},{"location":"list/#entries","text":"Returns an iterator that contains a table of [ index , value ] for each index in the List object, in order.","title":"entries()"},{"location":"list/#values","text":"Returns an iterator that contains the value for each index in the List object, in order.","title":"values()"},{"location":"list/#examples","text":"","title":"Examples"},{"location":"list/#using-the-list-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 local myList = List () myList : push ( \"a\" ) -- List {\"a\"} myList : push ( \"b\" ) -- List {\"a\", \"b\"} myList : push ( \"c\" ) -- List {\"a\", \"b\", \"c\"} myList . size -- 3 myList : get ( 2 ) -- \"b\" myList : indexOf ( \"a\" ) -- 1 myList : remove ( \"a\" ) -- true, List {\"b\", \"c\"} myList : remove ( \"d\" ) -- false, List {\"b\", \"c\"} myList : pop () -- \"c\", List {\"b\"} myList : set ( 1 , \"a\" ) myList : get ( 1 ) -- \"a\" myList : push ( \"a\" ) -- List {\"a\"} myList : push ( \"b\" ) -- List {\"a\", \"b\"} myList : push ( \"c\" ) -- List {\"a\", \"b\", \"c\"} myList : splice ( 2 , 1 , \"x\" ) -- List {\"a\", \"x\", \"c\"} myList : splice ( 2 , 1 ) -- List {\"a\", \"c\"} myList : clear () myList . size -- 0","title":"Using the List object"},{"location":"list/#iterating-the-list-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 local myList = List () myList : push ( \"a\" ) myList : push ( \"b\" ) myList : push ( \"c\" ) for index , value in myList : entries () do print ( index , value ) end -- 1, a -- 2, b -- 3, c for value in myList : values () do print ( value ) end -- a -- b -- c","title":"Iterating the List object"},{"location":"list/#complexities","text":"","title":"Complexities"},{"location":"list/#time-complexity","text":"Access Search Insertion Deletion O(1) O(n) O(n) O(n)","title":"Time Complexity"},{"location":"list/#space-complexity","text":"O(n)","title":"Space Complexity"},{"location":"map/","text":"Map \u00b6 A Map stores key-value pairs. Any non-nil value may be used as either a key or value. Constructor \u00b6 Map Map( Table < any , any > ? entries ) \u00b6 Constructs a new Map object with the optional default entries. 1 local myMap = Map ({[ \"a\" ] = 1 , [ \"b\" ] = 2 , [ \"c\" ] = 3 }) Properties \u00b6 number size \u00b6 Returns the number of entries in the Map object. Methods \u00b6 void clear() \u00b6 Removes all entries from the Map object. any get( any key ) \u00b6 Returns the value associated to the key , or nil if there is none. boolean has( any key ) \u00b6 Returns a boolean asserting whether a value has been associated to the key in the Map object or not. boolean remove( any key ) \u00b6 Removes the key from the Map object. Returns true if key existed in the Map object and was removed, otherwise it returns false. void set( any key , any value ) \u00b6 Sets the value for the key in the Map object. Iteration methods \u00b6 entries() \u00b6 Returns an iterator that contains a table of [ key , value ] for each entry in the Map object, in an undefined order. keys() \u00b6 Returns an iterator that contains the key for each entry in the Map object, in a undefined order. values() \u00b6 Returns an iterator that contains the value for each entry in the Map object, in a undefined order. Examples \u00b6 Using the Map object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 local myMap = Map () myMap : set ( \"a\" , 1 ) -- Map {[\"a\"] = 1} myMap : set ( \"a\" , 2 ) -- Map {[\"a\"] = 2} myMap : set ( \"b\" , 3 ) -- Map {[\"a\"] = 2, [\"b\"] = 3} myMap : has ( \"a\" ) -- true myMap : remove ( \"b\" ) -- true myMap : remove ( \"b\" ) -- false myMap : has ( \"b\" ) -- false myMap . size -- 1 myMap : clear () myMap . size -- 0 myMap : set ( \"a\" , true ) myMap : get ( \"a\" ) -- true myMap : remove ( \"a\" ) myMap : get ( \"a\" ) -- nil Iterating the Map object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 local myMap = Map ({[ \"a\" ] = 1 , [ \"b\" ] = 2 , [ \"c\" ] = 3 }) for key , value in myMap : entries () do print ( key , value ) end -- a, 1 -- b, 2 -- c, 3 for key in myMap : keys () do print ( key ) end -- a -- b -- c for value in myMap : values () do print ( value ) end -- 1 -- 2 -- 3 Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(1) O(1) O(1) O(1) Space Complexity \u00b6 O(n)","title":"Map"},{"location":"map/#map","text":"A Map stores key-value pairs. Any non-nil value may be used as either a key or value.","title":"Map"},{"location":"map/#constructor","text":"","title":"Constructor"},{"location":"map/#map-maptableany-any-entries","text":"Constructs a new Map object with the optional default entries. 1 local myMap = Map ({[ \"a\" ] = 1 , [ \"b\" ] = 2 , [ \"c\" ] = 3 })","title":"Map Map(Table&lt;any, any>? entries)"},{"location":"map/#properties","text":"","title":"Properties"},{"location":"map/#number-size","text":"Returns the number of entries in the Map object.","title":"number size"},{"location":"map/#methods","text":"","title":"Methods"},{"location":"map/#void-clear","text":"Removes all entries from the Map object.","title":"void clear()"},{"location":"map/#any-getany-key","text":"Returns the value associated to the key , or nil if there is none.","title":"any get(any key)"},{"location":"map/#boolean-hasany-key","text":"Returns a boolean asserting whether a value has been associated to the key in the Map object or not.","title":"boolean has(any key)"},{"location":"map/#boolean-removeany-key","text":"Removes the key from the Map object. Returns true if key existed in the Map object and was removed, otherwise it returns false.","title":"boolean remove(any key)"},{"location":"map/#void-setany-key-any-value","text":"Sets the value for the key in the Map object.","title":"void set(any key, any value)"},{"location":"map/#iteration-methods","text":"","title":"Iteration methods"},{"location":"map/#entries","text":"Returns an iterator that contains a table of [ key , value ] for each entry in the Map object, in an undefined order.","title":"entries()"},{"location":"map/#keys","text":"Returns an iterator that contains the key for each entry in the Map object, in a undefined order.","title":"keys()"},{"location":"map/#values","text":"Returns an iterator that contains the value for each entry in the Map object, in a undefined order.","title":"values()"},{"location":"map/#examples","text":"","title":"Examples"},{"location":"map/#using-the-map-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 local myMap = Map () myMap : set ( \"a\" , 1 ) -- Map {[\"a\"] = 1} myMap : set ( \"a\" , 2 ) -- Map {[\"a\"] = 2} myMap : set ( \"b\" , 3 ) -- Map {[\"a\"] = 2, [\"b\"] = 3} myMap : has ( \"a\" ) -- true myMap : remove ( \"b\" ) -- true myMap : remove ( \"b\" ) -- false myMap : has ( \"b\" ) -- false myMap . size -- 1 myMap : clear () myMap . size -- 0 myMap : set ( \"a\" , true ) myMap : get ( \"a\" ) -- true myMap : remove ( \"a\" ) myMap : get ( \"a\" ) -- nil","title":"Using the Map object"},{"location":"map/#iterating-the-map-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 local myMap = Map ({[ \"a\" ] = 1 , [ \"b\" ] = 2 , [ \"c\" ] = 3 }) for key , value in myMap : entries () do print ( key , value ) end -- a, 1 -- b, 2 -- c, 3 for key in myMap : keys () do print ( key ) end -- a -- b -- c for value in myMap : values () do print ( value ) end -- 1 -- 2 -- 3","title":"Iterating the Map object"},{"location":"map/#complexities","text":"","title":"Complexities"},{"location":"map/#time-complexity","text":"Access Search Insertion Deletion O(1) O(1) O(1) O(1)","title":"Time Complexity"},{"location":"map/#space-complexity","text":"O(n)","title":"Space Complexity"},{"location":"orderedmap/","text":"OrderedMap \u00b6 An OrderedMap stores key-value pairs. Any non-nil value may be used as either a key or value. The OrderedMap is different to the Map data structure because its entries are iterated over in insertion order. Constructor \u00b6 OrderedMap OrderedMap( Table < any , any > ? entries ) \u00b6 Constructs a new OrderedMap object with the optional default entries. 1 local myOrderedMap = OrderedMap ({[ \"a\" ] = 1 , [ \"b\" ] = 2 , [ \"c\" ] = 3 }) Properties \u00b6 number size \u00b6 Returns the number of entries in the OrderedMap object. Methods \u00b6 void clear() \u00b6 Removes all entries from the OrderedMap object. any get( any key ) \u00b6 Returns the value associated to the key , or nil if there is none. boolean has( any key ) \u00b6 Returns a boolean asserting whether a value has been associated to the key in the OrderedMap object or not. boolean remove( any key ) \u00b6 Removes the key from the OrderedMap object. Returns true if key existed in the OrderedMap object and was removed, otherwise it returns false. void set( any key , any value ) \u00b6 Sets the value for the key in the OrderedMap object. Iteration methods \u00b6 entries() \u00b6 Returns an iterator that contains a table of [ key , value ] for each entry in the OrderedMap object, in insertion order. keys() \u00b6 Returns an iterator that contains the key for each entry in the OrderedMap object, in insertion order. values() \u00b6 Returns an iterator that contains the value for each entry in the OrderedMap object, in insertion order. Examples \u00b6 Using the OrderedMap object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 local myOrderedMap = OrderedMap () myOrderedMap : set ( \"a\" , 1 ) -- OrderedMap {[\"a\"] = 1} myOrderedMap : set ( \"a\" , 2 ) -- OrderedMap {[\"a\"] = 2} myOrderedMap : set ( \"b\" , 3 ) -- OrderedMap {[\"a\"] = 2, [\"b\"] = 3} myOrderedMap : has ( \"a\" ) -- true myOrderedMap : remove ( \"b\" ) -- true myOrderedMap : remove ( \"b\" ) -- false myOrderedMap : has ( \"b\" ) -- false myOrderedMap . size -- 1 myOrderedMap : clear () myOrderedMap . size -- 0 myOrderedMap : set ( \"a\" , true ) myOrderedMap : get ( \"a\" ) -- true myOrderedMap : remove ( \"a\" ) myOrderedMap : get ( \"a\" ) -- nil Iterating the OrderedMap object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 local myOrderedMap = OrderedMap ({[ \"a\" ] = 1 , [ \"b\" ] = 2 , [ \"c\" ] = 3 }) for key , value in myOrderedMap : entries () do print ( key , value ) end -- a, 1 -- b, 2 -- c, 3 for key in myOrderedMap : keys () do print ( key ) end -- a -- b -- c for value in myOrderedMap : values () do print ( value ) end -- 1 -- 2 -- 3 Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(1) O(1) O(1) O(n) Space Complexity \u00b6 O(n)","title":"OrderedMap"},{"location":"orderedmap/#orderedmap","text":"An OrderedMap stores key-value pairs. Any non-nil value may be used as either a key or value. The OrderedMap is different to the Map data structure because its entries are iterated over in insertion order.","title":"OrderedMap"},{"location":"orderedmap/#constructor","text":"","title":"Constructor"},{"location":"orderedmap/#orderedmap-orderedmaptableany-any-entries","text":"Constructs a new OrderedMap object with the optional default entries. 1 local myOrderedMap = OrderedMap ({[ \"a\" ] = 1 , [ \"b\" ] = 2 , [ \"c\" ] = 3 })","title":"OrderedMap OrderedMap(Table&lt;any, any>? entries)"},{"location":"orderedmap/#properties","text":"","title":"Properties"},{"location":"orderedmap/#number-size","text":"Returns the number of entries in the OrderedMap object.","title":"number size"},{"location":"orderedmap/#methods","text":"","title":"Methods"},{"location":"orderedmap/#void-clear","text":"Removes all entries from the OrderedMap object.","title":"void clear()"},{"location":"orderedmap/#any-getany-key","text":"Returns the value associated to the key , or nil if there is none.","title":"any get(any key)"},{"location":"orderedmap/#boolean-hasany-key","text":"Returns a boolean asserting whether a value has been associated to the key in the OrderedMap object or not.","title":"boolean has(any key)"},{"location":"orderedmap/#boolean-removeany-key","text":"Removes the key from the OrderedMap object. Returns true if key existed in the OrderedMap object and was removed, otherwise it returns false.","title":"boolean remove(any key)"},{"location":"orderedmap/#void-setany-key-any-value","text":"Sets the value for the key in the OrderedMap object.","title":"void set(any key, any value)"},{"location":"orderedmap/#iteration-methods","text":"","title":"Iteration methods"},{"location":"orderedmap/#entries","text":"Returns an iterator that contains a table of [ key , value ] for each entry in the OrderedMap object, in insertion order.","title":"entries()"},{"location":"orderedmap/#keys","text":"Returns an iterator that contains the key for each entry in the OrderedMap object, in insertion order.","title":"keys()"},{"location":"orderedmap/#values","text":"Returns an iterator that contains the value for each entry in the OrderedMap object, in insertion order.","title":"values()"},{"location":"orderedmap/#examples","text":"","title":"Examples"},{"location":"orderedmap/#using-the-orderedmap-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 local myOrderedMap = OrderedMap () myOrderedMap : set ( \"a\" , 1 ) -- OrderedMap {[\"a\"] = 1} myOrderedMap : set ( \"a\" , 2 ) -- OrderedMap {[\"a\"] = 2} myOrderedMap : set ( \"b\" , 3 ) -- OrderedMap {[\"a\"] = 2, [\"b\"] = 3} myOrderedMap : has ( \"a\" ) -- true myOrderedMap : remove ( \"b\" ) -- true myOrderedMap : remove ( \"b\" ) -- false myOrderedMap : has ( \"b\" ) -- false myOrderedMap . size -- 1 myOrderedMap : clear () myOrderedMap . size -- 0 myOrderedMap : set ( \"a\" , true ) myOrderedMap : get ( \"a\" ) -- true myOrderedMap : remove ( \"a\" ) myOrderedMap : get ( \"a\" ) -- nil","title":"Using the OrderedMap object"},{"location":"orderedmap/#iterating-the-orderedmap-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 local myOrderedMap = OrderedMap ({[ \"a\" ] = 1 , [ \"b\" ] = 2 , [ \"c\" ] = 3 }) for key , value in myOrderedMap : entries () do print ( key , value ) end -- a, 1 -- b, 2 -- c, 3 for key in myOrderedMap : keys () do print ( key ) end -- a -- b -- c for value in myOrderedMap : values () do print ( value ) end -- 1 -- 2 -- 3","title":"Iterating the OrderedMap object"},{"location":"orderedmap/#complexities","text":"","title":"Complexities"},{"location":"orderedmap/#time-complexity","text":"Access Search Insertion Deletion O(1) O(1) O(1) O(n)","title":"Time Complexity"},{"location":"orderedmap/#space-complexity","text":"O(n)","title":"Space Complexity"},{"location":"orderedset/","text":"OrderedSet \u00b6 An OrderedSet stores a collection of values. A value in the OrderedSet may only occur once ; it is unique in the OrderedSet 's collection. The OrderedSet is different to the Set data structure because its values are iterated over in insertion order. Constructor \u00b6 OrderedSet OrderedSet( Array < any > ? values ) \u00b6 Constructs a new OrderedSet object with the optional default values. 1 local myOrderedSet = OrderedSet ({ \"a\" , \"b\" , \"c\" }) Properties \u00b6 number size \u00b6 Returns the number of values in the OrderedSet object. Methods \u00b6 boolean add( any value ) \u00b6 Adds value to the OrderedSet object. Returns false if value already exists in the OrderedSet object, otherwise it returns true. void clear() \u00b6 Removes all values from the OrderedSet object. boolean has( any value ) \u00b6 Returns a boolean asserting whether value is present within the OrderedSet object. boolean remove( any value ) \u00b6 Removes value from the OrderedSet object. Returns true if value existed in the OrderedSet object and was removed, otherwise it returns false. Iteration methods \u00b6 values() \u00b6 Returns an iterator that contains the value for each element in the OrderedSet object, in insertion order. Examples \u00b6 Using the OrderedSet object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 local myOrderedSet = OrderedSet () myOrderedSet : add ( 1 ) -- true, OrderedSet {1} myOrderedSet : add ( 5 ) -- true, OrderedSet {1, 5} myOrderedSet : add ( 5 ) -- false, OrderedSet {1, 5} myOrderedSet : add ( \"some text\" ) -- true, OrderedSet {1, 5, \"some text\"} myOrderedSet : has ( 1 ) -- true myOrderedSet : remove ( 1 ) -- true myOrderedSet : remove ( 1 ) -- false myOrderedSet . size -- 2 myOrderedSet : clear () myOrderedSet : has ( \"some text\" ) -- false myOrderedSet . size -- 0 Iterating the OrderedSet object \u00b6 1 2 3 4 5 6 7 8 9 local myOrderedSet = OrderedSet ({ \"a\" , \"b\" , \"c\" }) for value in myOrderedSet : values () do print ( value ) end -- a -- b -- c Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(1) O(1) O(1) O(n) Space Complexity \u00b6 O(n)","title":"OrderedSet"},{"location":"orderedset/#orderedset","text":"An OrderedSet stores a collection of values. A value in the OrderedSet may only occur once ; it is unique in the OrderedSet 's collection. The OrderedSet is different to the Set data structure because its values are iterated over in insertion order.","title":"OrderedSet"},{"location":"orderedset/#constructor","text":"","title":"Constructor"},{"location":"orderedset/#orderedset-orderedsetarrayany-values","text":"Constructs a new OrderedSet object with the optional default values. 1 local myOrderedSet = OrderedSet ({ \"a\" , \"b\" , \"c\" })","title":"OrderedSet OrderedSet(Array&lt;any>? values)"},{"location":"orderedset/#properties","text":"","title":"Properties"},{"location":"orderedset/#number-size","text":"Returns the number of values in the OrderedSet object.","title":"number size"},{"location":"orderedset/#methods","text":"","title":"Methods"},{"location":"orderedset/#boolean-addany-value","text":"Adds value to the OrderedSet object. Returns false if value already exists in the OrderedSet object, otherwise it returns true.","title":"boolean add(any value)"},{"location":"orderedset/#void-clear","text":"Removes all values from the OrderedSet object.","title":"void clear()"},{"location":"orderedset/#boolean-hasany-value","text":"Returns a boolean asserting whether value is present within the OrderedSet object.","title":"boolean has(any value)"},{"location":"orderedset/#boolean-removeany-value","text":"Removes value from the OrderedSet object. Returns true if value existed in the OrderedSet object and was removed, otherwise it returns false.","title":"boolean remove(any value)"},{"location":"orderedset/#iteration-methods","text":"","title":"Iteration methods"},{"location":"orderedset/#values","text":"Returns an iterator that contains the value for each element in the OrderedSet object, in insertion order.","title":"values()"},{"location":"orderedset/#examples","text":"","title":"Examples"},{"location":"orderedset/#using-the-orderedset-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 local myOrderedSet = OrderedSet () myOrderedSet : add ( 1 ) -- true, OrderedSet {1} myOrderedSet : add ( 5 ) -- true, OrderedSet {1, 5} myOrderedSet : add ( 5 ) -- false, OrderedSet {1, 5} myOrderedSet : add ( \"some text\" ) -- true, OrderedSet {1, 5, \"some text\"} myOrderedSet : has ( 1 ) -- true myOrderedSet : remove ( 1 ) -- true myOrderedSet : remove ( 1 ) -- false myOrderedSet . size -- 2 myOrderedSet : clear () myOrderedSet : has ( \"some text\" ) -- false myOrderedSet . size -- 0","title":"Using the OrderedSet object"},{"location":"orderedset/#iterating-the-orderedset-object","text":"1 2 3 4 5 6 7 8 9 local myOrderedSet = OrderedSet ({ \"a\" , \"b\" , \"c\" }) for value in myOrderedSet : values () do print ( value ) end -- a -- b -- c","title":"Iterating the OrderedSet object"},{"location":"orderedset/#complexities","text":"","title":"Complexities"},{"location":"orderedset/#time-complexity","text":"Access Search Insertion Deletion O(1) O(1) O(1) O(n)","title":"Time Complexity"},{"location":"orderedset/#space-complexity","text":"O(n)","title":"Space Complexity"},{"location":"queue/","text":"Queue \u00b6 A Queue is an ordered list of elements where insertion takes place at the end of the list and where removal takes place at the front of the list, folllowing the first-in, first-out (FIFO) principle. Constructor \u00b6 Queue Queue() \u00b6 Constructs a new Queue object. 1 local myQueue = Queue () Properties \u00b6 number size \u00b6 Returns the number of elements in the Queue object. Methods \u00b6 any dequeue() \u00b6 Removes the element at the front of the Queue object and returns its value if it exists, otherwise it returns nil . void enqueue( any element ) \u00b6 Inserts element at the end of the Queue object. boolean isEmpty() \u00b6 Returns a boolean asserting whether the Queue object is empty or not. any peek() \u00b6 Returns the element at the front of the Queue object if it exists, otherwise it returns nil . Iteration methods \u00b6 elements() \u00b6 Returns an iterator that contains the value for each element in the Queue object, in insertion order. Examples \u00b6 Using the Queue object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 local myQueue = Queue () myQueue : isEmpty () -- true myQueue : enqueue ( \"a\" ) -- Queue {\"a\"} myQueue : enqueue ( \"a\" ) -- Queue {\"a\", \"a\"} myQueue : enqueue ( \"b\" ) -- Queue {\"a\", \"a\", \"b\"} myQueue . size -- 3 myQueue : isEmpty () -- false myQueue : peek () -- \"a\" myQueue : dequeue () -- \"a\", Queue {\"a\", \"b\"} myQueue : dequeue () -- \"a\", Queue {\"b\"} myQueue : peek () -- \"b\" myQueue : dequeue () -- \"b\", Queue {} myQueue . size -- 0 myQueue : dequeue () -- nil Iterating the Queue object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 local myQueue = Queue () myQueue : enqueue ( \"a\" ) myQueue : enqueue ( \"b\" ) myQueue : enqueue ( \"c\" ) for element in myQueue : elements () do print ( element ) end -- a -- b -- c Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(1) O(n) O(1) O(1) Space Complexity \u00b6 O(n)","title":"Queue"},{"location":"queue/#queue","text":"A Queue is an ordered list of elements where insertion takes place at the end of the list and where removal takes place at the front of the list, folllowing the first-in, first-out (FIFO) principle.","title":"Queue"},{"location":"queue/#constructor","text":"","title":"Constructor"},{"location":"queue/#queue-queue","text":"Constructs a new Queue object. 1 local myQueue = Queue ()","title":"Queue Queue()"},{"location":"queue/#properties","text":"","title":"Properties"},{"location":"queue/#number-size","text":"Returns the number of elements in the Queue object.","title":"number size"},{"location":"queue/#methods","text":"","title":"Methods"},{"location":"queue/#any-dequeue","text":"Removes the element at the front of the Queue object and returns its value if it exists, otherwise it returns nil .","title":"any dequeue()"},{"location":"queue/#void-enqueueany-element","text":"Inserts element at the end of the Queue object.","title":"void enqueue(any element)"},{"location":"queue/#boolean-isempty","text":"Returns a boolean asserting whether the Queue object is empty or not.","title":"boolean isEmpty()"},{"location":"queue/#any-peek","text":"Returns the element at the front of the Queue object if it exists, otherwise it returns nil .","title":"any peek()"},{"location":"queue/#iteration-methods","text":"","title":"Iteration methods"},{"location":"queue/#elements","text":"Returns an iterator that contains the value for each element in the Queue object, in insertion order.","title":"elements()"},{"location":"queue/#examples","text":"","title":"Examples"},{"location":"queue/#using-the-queue-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 local myQueue = Queue () myQueue : isEmpty () -- true myQueue : enqueue ( \"a\" ) -- Queue {\"a\"} myQueue : enqueue ( \"a\" ) -- Queue {\"a\", \"a\"} myQueue : enqueue ( \"b\" ) -- Queue {\"a\", \"a\", \"b\"} myQueue . size -- 3 myQueue : isEmpty () -- false myQueue : peek () -- \"a\" myQueue : dequeue () -- \"a\", Queue {\"a\", \"b\"} myQueue : dequeue () -- \"a\", Queue {\"b\"} myQueue : peek () -- \"b\" myQueue : dequeue () -- \"b\", Queue {} myQueue . size -- 0 myQueue : dequeue () -- nil","title":"Using the Queue object"},{"location":"queue/#iterating-the-queue-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 local myQueue = Queue () myQueue : enqueue ( \"a\" ) myQueue : enqueue ( \"b\" ) myQueue : enqueue ( \"c\" ) for element in myQueue : elements () do print ( element ) end -- a -- b -- c","title":"Iterating the Queue object"},{"location":"queue/#complexities","text":"","title":"Complexities"},{"location":"queue/#time-complexity","text":"Access Search Insertion Deletion O(1) O(n) O(1) O(1)","title":"Time Complexity"},{"location":"queue/#space-complexity","text":"O(n)","title":"Space Complexity"},{"location":"set/","text":"Set \u00b6 A Set stores a collection of values. A value in the Set may only occur once ; it is unique in the Set 's collection. Constructor \u00b6 Set Set( Array < any > ? values ) \u00b6 Constructs a new Set object with the optional default values. 1 local mySet = Set ({ \"a\" , \"b\" , \"c\" }) Properties \u00b6 number size \u00b6 Returns the number of values in the Set object. Methods \u00b6 boolean add( any value ) \u00b6 Adds value to the Set object. Returns false if value already exists in the Set object, otherwise it returns true. void clear() \u00b6 Removes all values from the Set object. boolean has( any value ) \u00b6 Returns a boolean asserting whether value is present within the Set object. boolean remove( any value ) \u00b6 Removes value from the Set object. Returns true if value existed in the Set object and was removed, otherwise it returns false. Iteration methods \u00b6 values() \u00b6 Returns an iterator that contains the value for each element in the Set object, in a undefined order. Examples \u00b6 Using the Set object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 local mySet = Set () mySet : add ( 1 ) -- true, Set {1} mySet : add ( 5 ) -- true, Set {1, 5} mySet : add ( 5 ) -- false, Set {1, 5} mySet : add ( \"some text\" ) -- true, Set {1, 5, \"some text\"} mySet : has ( 1 ) -- true mySet : remove ( 1 ) -- true mySet : remove ( 1 ) -- false mySet . size -- 2 mySet : clear () mySet : has ( \"some text\" ) -- false mySet . size -- 0 Iterating the Set object \u00b6 1 2 3 4 5 6 7 8 9 local mySet = Set ({ \"a\" , \"b\" , \"c\" }) for value in mySet : values () do print ( value ) end -- a -- b -- c Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(1) O(1) O(1) O(1) Space Complexity \u00b6 O(n)","title":"Set"},{"location":"set/#set","text":"A Set stores a collection of values. A value in the Set may only occur once ; it is unique in the Set 's collection.","title":"Set"},{"location":"set/#constructor","text":"","title":"Constructor"},{"location":"set/#set-setarrayany-values","text":"Constructs a new Set object with the optional default values. 1 local mySet = Set ({ \"a\" , \"b\" , \"c\" })","title":"Set Set(Array&lt;any>? values)"},{"location":"set/#properties","text":"","title":"Properties"},{"location":"set/#number-size","text":"Returns the number of values in the Set object.","title":"number size"},{"location":"set/#methods","text":"","title":"Methods"},{"location":"set/#boolean-addany-value","text":"Adds value to the Set object. Returns false if value already exists in the Set object, otherwise it returns true.","title":"boolean add(any value)"},{"location":"set/#void-clear","text":"Removes all values from the Set object.","title":"void clear()"},{"location":"set/#boolean-hasany-value","text":"Returns a boolean asserting whether value is present within the Set object.","title":"boolean has(any value)"},{"location":"set/#boolean-removeany-value","text":"Removes value from the Set object. Returns true if value existed in the Set object and was removed, otherwise it returns false.","title":"boolean remove(any value)"},{"location":"set/#iteration-methods","text":"","title":"Iteration methods"},{"location":"set/#values","text":"Returns an iterator that contains the value for each element in the Set object, in a undefined order.","title":"values()"},{"location":"set/#examples","text":"","title":"Examples"},{"location":"set/#using-the-set-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 local mySet = Set () mySet : add ( 1 ) -- true, Set {1} mySet : add ( 5 ) -- true, Set {1, 5} mySet : add ( 5 ) -- false, Set {1, 5} mySet : add ( \"some text\" ) -- true, Set {1, 5, \"some text\"} mySet : has ( 1 ) -- true mySet : remove ( 1 ) -- true mySet : remove ( 1 ) -- false mySet . size -- 2 mySet : clear () mySet : has ( \"some text\" ) -- false mySet . size -- 0","title":"Using the Set object"},{"location":"set/#iterating-the-set-object","text":"1 2 3 4 5 6 7 8 9 local mySet = Set ({ \"a\" , \"b\" , \"c\" }) for value in mySet : values () do print ( value ) end -- a -- b -- c","title":"Iterating the Set object"},{"location":"set/#complexities","text":"","title":"Complexities"},{"location":"set/#time-complexity","text":"Access Search Insertion Deletion O(1) O(1) O(1) O(1)","title":"Time Complexity"},{"location":"set/#space-complexity","text":"O(n)","title":"Space Complexity"},{"location":"stack/","text":"Stack \u00b6 A Stack is an ordered list of elements where insertion and removal take place at the end of the list, folllowing the last-in, first-out (LIFO) principle. Constructor \u00b6 Stack Stack() \u00b6 Constructs a new Stack object. 1 local myStack = Stack () Properties \u00b6 number size \u00b6 Returns the number of elements in the Stack object. Methods \u00b6 boolean isEmpty() \u00b6 Returns a boolean asserting whether the Stack object is empty or not. any peek() \u00b6 Returns the element at the end of the Stack object if it exists, otherwise it returns nil . any pop() \u00b6 Removes the element at the end of the Stack object and returns its value if it exists, otherwise it returns nil . void push( any element ) \u00b6 Inserts element at the end of the Stack object. Iteration methods \u00b6 elements() \u00b6 Returns an iterator that contains the value for each element in the Stack object, in insertion order. Examples \u00b6 Using the Stack object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 local myStack = Stack () myStack : isEmpty () -- true myStack : push ( \"a\" ) -- Stack {\"a\"} myStack : push ( \"a\" ) -- Stack {\"a\", \"a\"} myStack : push ( \"b\" ) -- Stack {\"a\", \"a\", \"b\"} myStack . size -- 3 myStack : isEmpty () -- false myStack : peek () -- \"b\" myStack : pop () -- \"b\", Stack {\"a\", \"a\"} myStack : pop () -- \"a\", Stack {\"a\"} myStack : peek () -- \"a\" myStack : pop () -- \"a\", Stack {} myStack . size -- 0 myStack : pop () -- nil Iterating the Stack object \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 local myStack = Stack () myStack : push ( \"a\" ) myStack : push ( \"b\" ) myStack : push ( \"c\" ) for element in myStack : elements () do print ( element ) end -- a -- b -- c Complexities \u00b6 Time Complexity \u00b6 Access Search Insertion Deletion O(1) O(n) O(1) O(1) Space Complexity \u00b6 O(n)","title":"Stack"},{"location":"stack/#stack","text":"A Stack is an ordered list of elements where insertion and removal take place at the end of the list, folllowing the last-in, first-out (LIFO) principle.","title":"Stack"},{"location":"stack/#constructor","text":"","title":"Constructor"},{"location":"stack/#stack-stack","text":"Constructs a new Stack object. 1 local myStack = Stack ()","title":"Stack Stack()"},{"location":"stack/#properties","text":"","title":"Properties"},{"location":"stack/#number-size","text":"Returns the number of elements in the Stack object.","title":"number size"},{"location":"stack/#methods","text":"","title":"Methods"},{"location":"stack/#boolean-isempty","text":"Returns a boolean asserting whether the Stack object is empty or not.","title":"boolean isEmpty()"},{"location":"stack/#any-peek","text":"Returns the element at the end of the Stack object if it exists, otherwise it returns nil .","title":"any peek()"},{"location":"stack/#any-pop","text":"Removes the element at the end of the Stack object and returns its value if it exists, otherwise it returns nil .","title":"any pop()"},{"location":"stack/#void-pushany-element","text":"Inserts element at the end of the Stack object.","title":"void push(any element)"},{"location":"stack/#iteration-methods","text":"","title":"Iteration methods"},{"location":"stack/#elements","text":"Returns an iterator that contains the value for each element in the Stack object, in insertion order.","title":"elements()"},{"location":"stack/#examples","text":"","title":"Examples"},{"location":"stack/#using-the-stack-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 local myStack = Stack () myStack : isEmpty () -- true myStack : push ( \"a\" ) -- Stack {\"a\"} myStack : push ( \"a\" ) -- Stack {\"a\", \"a\"} myStack : push ( \"b\" ) -- Stack {\"a\", \"a\", \"b\"} myStack . size -- 3 myStack : isEmpty () -- false myStack : peek () -- \"b\" myStack : pop () -- \"b\", Stack {\"a\", \"a\"} myStack : pop () -- \"a\", Stack {\"a\"} myStack : peek () -- \"a\" myStack : pop () -- \"a\", Stack {} myStack . size -- 0 myStack : pop () -- nil","title":"Using the Stack object"},{"location":"stack/#iterating-the-stack-object","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 local myStack = Stack () myStack : push ( \"a\" ) myStack : push ( \"b\" ) myStack : push ( \"c\" ) for element in myStack : elements () do print ( element ) end -- a -- b -- c","title":"Iterating the Stack object"},{"location":"stack/#complexities","text":"","title":"Complexities"},{"location":"stack/#time-complexity","text":"Access Search Insertion Deletion O(1) O(n) O(1) O(1)","title":"Time Complexity"},{"location":"stack/#space-complexity","text":"O(n)","title":"Space Complexity"}]}